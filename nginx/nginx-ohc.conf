# Kubernetes note for Load Blanacing
# The Address
#
#    main-app-service.openhab-cloud.svc.cluster.local
#
# Will return a DNS A record for every pod int the "main-app-service" headless service group
# This is a supported nginx service discovery type for upstream hosts
# See: https://www.nginx.com/blog/dns-service-discovery-nginx-plus/

#socket.io connections (from OH) NEED has on UUID for routing, all other connections will be cookie or round robin
upstream socketapp {
	hash $http_uuid;
	server main-app-service.openhab-cloud.svc.cluster.local:3000 fail_timeout=5s max_fails=5;
}

#all other connections to serve openHAB-Cloud requests (not proxied)
upstream webapp {
	server main-app-service.openhab-cloud.svc.cluster.local:3000 fail_timeout=5s max_fails=5;
}

#Connections that need to be proxied, need same entries as "socketapp"
upstream proxyapp {
	server proxy-app-service.openhab-cloud.svc.cluster.local:3000 fail_timeout=5s max_fails=5;
}


#Full proxy for home.yourhost.com
server {
    listen 0.0.0.0:80;
    server_name home.*;

    charset utf-8;
    client_max_body_size 300m;

    root /var/www/html;

    location ~ /.well-known {
      allow all;
    }

	#proxy redirects
	include /etc/nginx/nginx-ohc-proxy.include;

  	location / {
		set $upstream_server proxyapp;
		#if we have a cookie, try using this server
		#also, ifIsEvil https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
		#for why we use this as little as possible
		if ($http_cookie ~ "CloudServer=(\S+)\%3A(\d+).*") {
			set $upstream_host $1;
			set $upstream_port $2;
			set $upstream_server "${upstream_host}:${upstream_port}";
		}
		proxy_pass http://$upstream_server;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr ;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
		proxy_set_header X-Forwarded-Proto https;
		proxy_intercept_errors on;
		recursive_error_pages on;
		error_page 301 302 307 = @handle_proxy;
		#if this server is down we need to try a new upstream
		error_page 500 501 502 503 504 = @proxy_down;
	}
}

# Main myopenhab.org requests
server {
	listen 0.0.0.0:80 default_server;
	server_name  _;

	charset utf-8;
	client_max_body_size 300m;

	root /var/www/html;

	location ~ /.well-known {
		allow all;
	}

	# static file locations
	location /css {
		alias  /var/www/html/css;
	}
	location /js {
		alias /var/www/html/js;
	}
	location /img {
		alias /var/www/html/img;
	}
	location /bootstrap {
		alias /var/www/html/bootstrap;
	}
	location /font-icons {
		alias /var/www/html/font-icons;
	}
	location /fonts {
		alias /var/www/html/fonts;
	}
	location /js-plugin {
		alias /var/www/html/js-plugin;
	}
	location /staff/js-plugin {
		alias /var/www/html/js-plugin;
	}
	location /downloads {
		alias /var/www/html/downloads;
	}

	#OH Socket.io Connections (from OH)
	location /socket.io {
		proxy_pass http://socketapp;
		proxy_redirect off;
		proxy_http_version 1.1;
		proxy_set_header Host $host;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header X-Real-IP $remote_addr ;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
		proxy_set_header X-Forwarded-Proto https;
	}

	#proxy redirects
	include /etc/nginx/nginx-ohc-proxy.include;

	#Proxied Connections (from clients)
	location ~ ^/(rest|images|static|rrdchart.png|chart|openhab.app|WebApp|CMD|cometVisu|proxy|greent|jquery|classicui|ui|basicui|paperui|doc|start|icon|habmin|remote|habpanel|ifttt/v1/actions/command){
	  set $upstream_server proxyapp;
	  #if we have a cookie, try using this server
	  #also, ifIsEvil https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
	  #for why we use this as little as possible
	  if ($http_cookie ~ "CloudServer=(\S+)\%3A(\d+).*") {
	    set $upstream_host $1;
	    set $upstream_port $2;
	    set $upstream_server "${upstream_host}:${upstream_port}";
	  }
	  proxy_pass http://$upstream_server;
	  proxy_redirect off;
	  proxy_http_version 1.1;
	  proxy_set_header Host $host;
	  proxy_set_header X-Real-IP $remote_addr ;
	  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
	  proxy_set_header X-Forwarded-Proto https;
		proxy_intercept_errors on;
		recursive_error_pages on;
	  error_page 301 302 307 = @handle_proxy;
	  #if this server is down we need to try a new upstream
	  error_page 500 501 502 503 504 = @proxy_down;
	}

  #All other non proxy connections
	location / {
	    proxy_pass http://webapp;
	    proxy_redirect off;
	    proxy_http_version 1.1;
	    proxy_set_header Host $host;
	    proxy_set_header X-Real-IP $remote_addr ;
	    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ;
	    proxy_set_header X-Forwarded-Proto https;
	}
}
